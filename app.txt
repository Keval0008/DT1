import dash_ag_grid as dag
from dash import html
import pandas as pd

def create_ag_grid_table(
    dataframe,
    table_id=None,
    highlight_vars=None,
    highlight_color='lightyellow',
    default_col_def=None,
    precision=2,
    enable_enterprise=False,
    enable_download=False
):
    """
    Creates an AG Grid table from a pandas DataFrame with optional features.
    
    Args:
        dataframe: Input DataFrame
        table_id: Unique ID for the table
        highlight_vars: List of values to highlight in any cell
        highlight_color: Color for highlighted cells
        default_col_def: Custom column definitions
        precision: Rounding for numeric columns
        enable_enterprise: Enable enterprise features
        enable_download: Show download button
        
    Returns:
        AG Grid component
    """
    if dataframe.empty:
        return html.Div("No data available", style={'color': 'gray'})
    
    # Make a copy to avoid modifying original
    df = dataframe.copy()
    
    # Apply precision to numeric columns
    float_cols = df.select_dtypes(include=['float64']).columns
    for col in float_cols:
        df[col] = df[col].round(precision)
    
    # Validate highlight_vars
    if highlight_vars:
        # Convert highlight_vars to a list if it isn't already
        highlight_vars = list(highlight_vars) if not isinstance(highlight_vars, list) else highlight_vars
        if not highlight_vars:
            print("Warning: highlight_vars is empty.")
    
    # Generate column definitions
    column_defs = []
    for col in df.columns:
        col_def = {
            'field': col,
            'headerName': col.replace('_', ' ').title(),
            'filter': True,
            'sortable': True,
            'resizable': True
        }
        
        # Apply cellStyle to highlight cells with values in highlight_vars
        if highlight_vars:
            # Convert highlight_vars to a JavaScript-compatible string
            # Handle different types (numbers, strings) safely
            js_highlight_vars = [str(val) for val in highlight_vars]
            js_highlight_array = f"[{', '.join(f'\"{val}\"' for val in js_highlight_vars)}]"
            col_def['cellStyle'] = {
                'function': f"params => {{ return {js_highlight_array}.includes(String(params.value)) ? {{ backgroundColor: '{highlight_color}' }} : null; }}"
            }
            
        # Special formatting for numeric columns
        if col in float_cols:
            col_def['type'] = 'numericColumn'
            col_def['valueFormatter'] = {"function": f"params.value !== null ? params.value.toFixed({precision}) : ''"}
            
        column_defs.append(col_def)
    
    # Configure default column definitions
    if default_col_def is None:
        default_col_def = {
            "flex": 1,
            "minWidth": 100,
            "filter": "agTextColumnFilter",
            "floatingFilter": True,
        }
    
    # Create the grid
    grid = dag.AgGrid(
        id=table_id or f"grid-{pd.Timestamp.now().value}",
        rowData=df.to_dict('records'),
        columnDefs=column_defs,
        defaultColDef=default_col_def,
        dashGridOptions={
            "pagination": True,
            "paginationPageSize": 10,
            "animateRows": False,
            "domLayout": "autoHeight"
        },
        columnSize="sizeToFit",
        style={'width': '100%', 'height': None},
        enableEnterpriseModules=enable_enterprise,  # Use boolean
        className="ag-theme-alpine"
    )
    
    # Add download button if enabled
    if enable_download:
        return html.Div([
            grid,
            html.Button(
                "Download CSV",
                id={"type": "download-button", "index": table_id},
                style={"marginTop": "10px"}
            ),
            dcc.Download(id={"type": "download", "index": table_id})
        ])
    
    return grid
