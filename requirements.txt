# BSRS Role Holder Collection Tool

This is a Python-based GUI tool built with **Tkinter** to assist users in validating and processing Excel-based Role Holder submissions for the BSRS process. It includes both user and admin functionalities to ensure seamless validation, conflict resolution, and consolidation of records.

## Features

### User Panel
- Select one or multiple Excel files (BSRS templates).
- Validates structure, size, and required sheets (`Sheet1`, `L&D`).
- Verifies user roles (Preparer, Reviewer, Account Owner) based on group grade.
- Enriches data with additional information from the `L&D` sheet.
- Adds timestamps and usernames for accountability.
- Generates a styled and validated Excel file.
- Allows saving for **Review** or directly if validation passes.

### ðŸ› Admin Panel
- Restricted to users specified in `app_config.json`.
- Selects a folder of user-submitted templates.
- Merges and consolidates files into:
  - `Consolidated Output` â€“ Valid and conflict-resolved data.
  - `Outstanding Records` â€“ Incomplete submissions.
  - `Conflict Report` â€“ Rows with reviewer conflicts.
- Produces a single Excel workbook with three formatted sheets.

---

## Requirements

- Python 3.9+
- Required packages:
  - `pandas`
  - `numpy`
  - `openpyxl`
  - `tkinter` (comes pre-installed with Python)
- For Admin Panel: Must be one of the usernames in `admin_users` list in `app_config.json`.

---

## How to Run

1. Make sure you have Python installed.
2. Install required libraries:

   ```bash
   pip install pandas openpyxl numpy
   ```

3. Run the script:

   ```bash
   python app_v2.py
   ```

---

## Configuration

Config settings are stored in `app_config.json`. Default values include:

```json
{
  "admin_users": ["admin1", "admin2", "superuser"],
  "required_sheets": ["Sheet1", "L&D"],
  "max_file_size_mb": 50,
  "backup_enabled": true,
  "log_level": "INFO",
  "auto_save_backup": true,
  "validation_strict_mode": false
}
```

---

## Output

- **Processed files** are saved with a timestamp and your username.
- **Review mode** creates a Validation Errors sheet.
- **Admin mode output**:
  - `Consolidated_output_<user>_<timestamp>.xlsx`

---

## Logs and Backups

- Logs are stored in the `logs/` directory.
- Backups of original files are stored in `backups/`.

---

## Developer Notes

- Multi-level Excel headers are handled using `pandas.MultiIndex`.
- Data validation and enrichment are dynamically controlled by `L&D` sheet content.
- Tkinter-based modal windows and progress bars prevent UI freezing.

---

## Access Control

- Admin features are hidden for non-admin users.
- Usernames are fetched using `getpass.getuser()`.

---

## Support

For bug reports or enhancements, contact the Data Science team.

---

## Disclaimer

This tool is for internal processing only. Make sure to review output files, especially when validation warnings are triggered.
