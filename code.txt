import tkinter as tk
from tkinter import filedialog, messagebox
import os
import shutil
from collections import Counter

def select_files():
    files = filedialog.askopenfilenames(title="Select Files")
    file_list.clear()
    file_list.extend(list(files))
    update_stats()

def select_folder():
    folder = filedialog.askdirectory(title="Select Destination Folder")
    if folder:
        folder_path.set(folder)
        update_stats()

def save_files():
    if not file_list:
        update_status("Error: No files selected", "red")
        return
    if not folder_path.get():
        update_status("Error: No folder selected", "red")
        return

    keyword = keyword_entry.get().strip()
    if not keyword:
        update_status("Error: No keyword entered", "red")
        return

    mode = prefix_suffix.get()
    try:
        for file in file_list:
            base_name = os.path.basename(file)
            name, ext = os.path.splitext(base_name)
            new_name = f"{keyword}_{name}{ext}" if mode == "prefix" else f"{name}_{keyword}{ext}"
            dest_path = os.path.join(folder_path.get(), new_name)
            shutil.copy(file, dest_path)
        update_status(f"Success: {len(file_list)} files saved!", "green")
    except Exception as e:
        update_status(f"Error: {str(e)}", "red")
    update_stats()

def update_stats():
    # Update file count
    stats_text = f"Files Selected: {len(file_list)}\n"

    # Update folder location
    folder = folder_path.get() or "Not selected"
    stats_text += f"Destination Folder: {folder}\n"

    # Update file type breakdown
    if file_list:
        extensions = [os.path.splitext(f)[1].lower() for f in file_list]
        ext_counts = Counter(extensions)
        stats_text += "File Types:\n" + "\n".join(
            f"  {ext or 'No extension'}: {count}" for ext, count in ext_counts.items()
        )
    else:
        stats_text += "File Types: None"

    stats_label.config(text=stats_text)

def update_status(message, color):
    status_label.config(text=message, fg=color)

# Tkinter UI Setup
root = tk.Tk()
root.title("File Rename & Save")
root.geometry("500x600")
root.configure(bg="#f5f5f5")
root.resizable(False, False)

# Variables
file_list = []
folder_path = tk.StringVar()
prefix_suffix = tk.StringVar(value="prefix")

# Fonts and Styles
label_font = ("Helvetica", 10)
entry_font = ("Helvetica", 10)
button_font = ("Helvetica", 10, "bold")
stats_font = ("Helvetica", 9)

# Main Frame
main_frame = tk.Frame(root, bg="#f5f5f5")
main_frame.pack(padx=20, pady=20, fill="both", expand=True)

# Title
tk.Label(main_frame, text="File Rename & Save", font=("Helvetica", 14, "bold"), bg="#f5f5f5").pack(pady=10)

# Select Files Button
tk.Button(main_frame, text="Select Files", command=select_files, font=button_font, bg="#4a90e2", fg="white",
          relief="flat", width=20).pack(pady=5)

# Select Folder Button
tk.Button(main_frame, text="Select Folder", command=select_folder, font=button_font, bg="#4a90e2", fg="white",
          relief="flat", width=20).pack(pady=5)

# Keyword Entry
tk.Label(main_frame, text="Keyword", font=label_font, bg="#f5f5f5").pack(pady=(10, 2))
keyword_entry = tk.Entry(main_frame, font=entry_font, width=25, relief="flat", bg="#ffffff", highlightthickness=1,
                         highlightbackground="#d3d3d3")
keyword_entry.pack()

# Prefix/Suffix Radio Buttons
radio_frame = tk.Frame(main_frame, bg="#f5f5f5")
radio_frame.pack(pady=10)
tk.Radiobutton(radio_frame, text="Prefix", variable=prefix_suffix, value="prefix", font=label_font, bg="#f5f5f5",
               selectcolor="#f5f5f5").pack(side="left", padx=10)
tk.Radiobutton(radio_frame, text="Suffix", variable=prefix_suffix, value="suffix", font=label_font, bg="#f5f5f5",
               selectcolor="#f5f5f5").pack(side="left", padx=10)

# Save Button
tk.Button(main_frame, text="Save Files", command=save_files, font=button_font, bg="#2ecc71", fg="white", relief="flat",
          width=20).pack(pady=15)

# Status Label
status_label = tk.Label(main_frame, text="Ready", font=label_font, bg="#f5f5f5", fg="#333333")
status_label.pack(pady=5)

# Stats Label
stats_label = tk.Label(main_frame, text="Files Selected: 0\nDestination Folder: Not selected\nFile Types: None",
                       font=stats_font, bg="#f5f5f5", fg="#333333", justify="left", anchor="nw")
stats_label.pack(pady=10, fill="x")

root.mainloop()
