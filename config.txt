# Step 1: Total balance overview
print("=== STEP 1: TOTAL BALANCE OVERVIEW ===")
total_original = df['FTPBalance'].sum()
total_final = df['Final Balance'].sum()
total_adjustment = df['Adjustment'].sum()
net_change = total_final - total_original

percentage_change = (net_change / total_original * 100) if total_original != 0 else 0

print(f"Total Original Balance: ${total_original:,.2f}")
print(f"Total Final Balance: ${total_final:,.2f}")
print(f"Net Adjustment: ${total_adjustment:,.2f}")
print(f"Percentage Change: {percentage_change:.2f}%")

# Step 2: Account-level overview
print("\n=== STEP 2: ACCOUNT-LEVEL OVERVIEW ===")
total_accounts = df['GRCA_Account'].nunique()
adjusted_accounts = df[df['Adjustment'] != 0]['GRCA_Account'].nunique()
adjusted_percentage = (adjusted_accounts / total_accounts * 100)

print(f"Total Unique Accounts: {total_accounts:,}")
print(f"Accounts with Adjustments: {adjusted_accounts:,}")
print(f"Percentage of Accounts Adjusted: {adjusted_percentage:.2f}%")

# Step 3: Net adjustment impact
print("\n=== STEP 3: NET ADJUSTMENT IMPACT ===")
positive_adjustments = df[df['Adjustment'] > 0]['Adjustment'].sum()
negative_adjustments = df[df['Adjustment'] < 0]['Adjustment'].sum()
gross_adjustment = df['Adjustment'].abs().sum()

print(f"Total Positive Adjustments: ${positive_adjustments:,.2f}")
print(f"Total Negative Adjustments: ${negative_adjustments:,.2f}")
print(f"Gross Adjustment Volume: ${gross_adjustment:,.2f}")
print(f"Net Adjustment Impact: ${total_adjustment:,.2f}")

if total_adjustment > 0:
    print("Overall Impact: Balance INCREASED")
else:
    print("Overall Impact: Balance DECREASED")

# Step 4: Adjustment type breakdown
print("\n=== STEP 4: ADJUSTMENT TYPE BREAKDOWN ===")

# Get overall totals for percentage calculations
total_adjustment_amount = df['Adjustment'].sum()
total_adjusted_accounts_count = df[df['Adjustment'] != 0]['GRCA_Account'].nunique()

# Analyze each adjustment type
adj_type_analysis = df.groupby('Adj Purpose Desc').agg({
    'Adjustment': 'sum',
    'GRCA_Account': 'nunique',
    'FTPBalance': 'sum'
}).reset_index()

# Calculate percentages
adj_type_analysis['pct_of_total_adj_amount'] = (adj_type_analysis['Adjustment'] / total_adjustment_amount * 100).round(2)
adj_type_analysis['pct_of_adjusted_accounts'] = (adj_type_analysis['GRCA_Account'] / total_adjusted_accounts_count * 100).round(2)

# Sort by impact
adj_type_analysis = adj_type_analysis.sort_values('Adjustment', key=abs, ascending=False)

print(f"{'Adjustment Type':<30} {'Amount':<15} {'% of Total':<10} {'Accounts':<10} {'% of Accts':<10} {'Avg Impact':<12}")
print("="*90)

for _, row in adj_type_analysis.iterrows():
    avg_impact = row['Adjustment'] / row['GRCA_Account'] if row['GRCA_Account'] > 0 else 0
    print(f"{row['Adj Purpose Desc']:<30} ${row['Adjustment']:>12,.2f} {row['pct_of_total_adj_amount']:>9}% {row['GRCA_Account']:>9,} {row['pct_of_adjusted_accounts']:>9}% ${avg_impact:>10,.2f}")

# Step 5: Reclass adjustment concentration
print("\n=== STEP 5: RECLASS ADJUSTMENT CONCENTRATION ===")

reclass_types = ["Country Reclass", "Industry Reclass", "XXXX4 reclass"]
reclass_data = df[df['Adj Purpose Desc'].isin(reclass_types)]

# Calculate reclass totals
reclass_total_adj = reclass_data['Adjustment'].sum()
reclass_total_accounts = reclass_data['GRCA_Account'].nunique()

# Calculate percentages of overall
reclass_pct_of_total_adj = (reclass_total_adj / total_adjustment_amount * 100).round(2)
reclass_pct_of_adjusted_accounts = (reclass_total_accounts / total_adjusted_accounts_count * 100).round(2)

print(f"Total Reclass Adjustments: ${reclass_total_adj:,.2f}")
print(f"Reclass as % of Total Adjustments: {reclass_pct_of_total_adj}%")
print(f"Accounts with Reclass Adjustments: {reclass_total_accounts:,}")
print(f"Reclass Accounts as % of All Adjusted Accounts: {reclass_pct_of_adjusted_accounts}%")

# Detailed reclass breakdown
print("\n--- Detailed Reclass Breakdown ---")
reclass_breakdown = reclass_data.groupby('Adj Purpose Desc').agg({
    'Adjustment': ['sum', 'mean', 'count'],
    'GRCA_Account': 'nunique'
})

for reclass_type in reclass_types:
    if reclass_type in reclass_data['Adj Purpose Desc'].values:
        type_data = reclass_data[reclass_data['Adj Purpose Desc'] == reclass_type]
        type_adj = type_data['Adjustment'].sum()
        type_accounts = type_data['GRCA_Account'].nunique()
        type_pct_of_reclass = (type_adj / reclass_total_adj * 100).round(2)
        
        print(f"\n{reclass_type}:")
        print(f"  Amount: ${type_adj:,.2f} ({type_pct_of_reclass}% of reclass total)")
        print(f"  Accounts: {type_accounts:,}")
        print(f"  Average per Account: ${type_adj/type_accounts:,.2f}" if type_accounts > 0 else "  No accounts")

# Step 6: Zero-balance impact analysis
print("\n=== STEP 6: ZERO-BALANCE IMPACT ANALYSIS ===")

# Find accounts that were zeroed out
zeroed_accounts = df[(df['FTPBalance'] != 0) & (df['Final Balance'] == 0)]
zeroed_count = zeroed_accounts['GRCA_Account'].nunique()
original_balance_wiped = zeroed_accounts['FTPBalance'].sum()

print(f"Accounts Zeroed Out: {zeroed_count:,}")
print(f"Original Balance Wiped Out: ${original_balance_wiped:,.2f}")

# Check how many of these were due to reclass adjustments
reclass_zeroed = zeroed_accounts[zeroed_accounts['Adj Purpose Desc'].isin(reclass_types)]
reclass_zeroed_count = reclass_zeroed['GRCA_Account'].nunique()
reclass_balance_wiped = reclass_zeroed['FTPBalance'].sum()

print(f"Accounts Zeroed Out by Reclass: {reclass_zeroed_count:,}")
print(f"Balance Wiped Out by Reclass: ${reclass_balance_wiped:,.2f}")

if zeroed_count > 0:
    print(f"Percentage of Zeroed Accounts due to Reclass: {(reclass_zeroed_count/zeroed_count*100):.2f}%")

# Final Summary
print("\n" + "="*70)
print("FINAL SUMMARY")
print("="*70)

print(f"üìä Balance Impact: {percentage_change:+.2f}% change (${net_change:,.2f})")
print(f"üë• Account Coverage: {adjusted_percentage:.1f}% of accounts adjusted")
print(f"üéØ Reclass Dominance: {reclass_pct_of_total_adj}% of all adjustment value")
print(f"üö® Severe Impact: {zeroed_count:,} accounts zeroed out (${original_balance_wiped:,.2f} wiped)")

# Identify the biggest driver
biggest_adj_type = adj_type_analysis.iloc[0]
print(f"üìà Biggest Driver: {biggest_adj_type['Adj Purpose Desc']} (${biggest_adj_type['Adjustment']:,.2f})")

if reclass_pct_of_total_adj > 50:
    print("üí° INSIGHT: Reclass adjustments dominate the adjustment landscape")
else:
    print("üí° INSIGHT: Adjustments are distributed across multiple types")

if reclass_zeroed_count > 0:
    print(f"‚ö†Ô∏è  WARNING: Reclass adjustments zeroed out {reclass_zeroed_count:,} accounts")
