import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import os
import shutil
from collections import Counter
from datetime import datetime
import pandas as pd

# Predefined keyword
keyword = "backup"

def select_files():
    files = filedialog.askopenfilenames(title="Select Excel Files", filetypes=[("Excel files", "*.xlsx")])
    file_list.clear()
    file_list.extend(list(files))
    update_stats()

def select_folder():
    folder = filedialog.askdirectory(title="Select Destination Folder")
    if folder:
        folder_path.set(folder)
        update_stats()

def save_files():
    if not file_list:
        update_status("Error: No files selected", "red")
        return
    if not folder_path.get():
        update_status("Error: No folder selected", "red")
        return

    # Get current timestamp in DDMMYYYY_HHMMSS format
    timestamp = datetime.now().strftime("%d%m%Y_%H%M%S")
    
    try:
        for file in file_list:
            # Read the Excel file
            df = pd.read_excel(file)
            
            # Add new columns
            df['Submitted by'] = keyword
            df['Submitted time'] = timestamp
            
            # Get file name and create new name with suffix
            base_name = os.path.basename(file)
            name, ext = os.path.splitext(base_name)
            new_name = f"{name}_{keyword}_{timestamp}{ext}"
            dest_path = os.path.join(folder_path.get(), new_name)
            
            # Save modified Excel file
            df.to_excel(dest_path, index=False)
            
        update_status(f"Success: {len(file_list)} files saved!", "green")
    except Exception as e:
        update_status(f"Error: {str(e)}", "red")
    update_stats()

def update_stats():
    # Update file count and folder
    stats_text = f"Files Selected: {len(file_list)}\n"
    folder = folder_path.get() or "Not selected"
    stats_text += f"Destination Folder: {folder}\n"
    stats_label.config(text=stats_text)

    # Clear existing table data
    for item in file_type_table.get_children():
        file_type_table.delete(item)

    # Update file type breakdown in table
    if file_list:
        extensions = [os.path.splitext(f)[1].lower() or 'No extension' for f in file_list]
        ext_counts = Counter(extensions)
        for ext, count in ext_counts.items():
            file_type_table.insert("", "end", values=(ext, count))
    else:
        file_type_table.insert("", "end", values=("None", 0))

def update_status(message, color):
    status_label.config(text=message, fg=color)

# Tkinter UI Setup
root = tk.Tk()
root.title("File Rename & Save")
root.geometry("500x450")  # Adjusted height for table
root.configure(bg="#f5f5f5")
root.resizable(False, False)

# Variables
file_list = []
folder_path = tk.StringVar()

# Fonts and Styles
label_font = ("Helvetica", 10)
button_font = ("Helvetica", 10, "bold")
stats_font = ("Helvetica", 9)

# ttk Style for rounded buttons and table
style = ttk.Style()
style.theme_use("clam")  # Use 'clam' theme for better customization
style.configure("TButton",
                padding=6,
                relief="raised",
                background="#4a90e2",
                foreground="white",
                borderwidth=2,
                borderradius=10)  # Rounded corners
style.map("TButton",
          background=[("active", "#357ABD")])  # Darker blue when clicked
style.configure("Treeview",
                font=stats_font,
                rowheight=25,
                background="#ffffff",
                foreground="#333333",
                fieldbackground="#ffffff")
style.configure("Treeview.Heading",
                font=("Helvetica", 9, "bold"),
                background="#d3d3d3",
                foreground="#333333")
style.layout("Treeview",
             [('Treeview.treearea', {'sticky': 'nswe', 'border': 1, 'borderradius': 10})])  # Rounded table

# Main Frame
main_frame = tk.Frame(root, bg="#f5f5f5")
main_frame.pack(padx=20, pady=20, fill="both", expand=True)

# Title
tk.Label(main_frame, text="File Rename & Save", font=("Helvetica", 14, "bold"), bg="#f5f5f5").pack(pady=10)

# Select Files Button
ttk.Button(main_frame, text="Select Excel Files", command=select_files, style="TButton").pack(pady=5)

# Select Folder Button
ttk.Button(main_frame, text="Select Folder", command=select_folder, style="TButton").pack(pady=5)

# Save Button
ttk.Button(main_frame, text="Save Files", command=save_files, style="TButton").pack(pady=15)

# Status Label
status_label = tk.Label(main_frame, text="Ready", font=label_font, bg="#f5f5f5", fg="#333333")
status_label.pack(pady=5)

# Stats Label (for file count and folder)
stats_label = tk.Label(main_frame, text="Files Selected: 0\nDestination Folder: Not selected",
                       font=stats_font, bg="#f5f5f5", fg="#333333", justify="left", anchor="nw")
stats_label.pack(pady=5, fill="x")

# File Type Table
table_frame = tk.Frame(main_frame, bg="#f5f5f5")
table_frame.pack(pady=10, fill="x")
file_type_table = ttk.Treeview(table_frame, columns=("Extension", "Count"), show="headings", height=4)
file_type_table.heading("Extension", text="File Type")
file_type_table.heading("Count", text="Count")
file_type_table.column("Extension", width=120, anchor="w")
file_type_table.column("Count", width=80, anchor="center")
file_type_table.pack(fill="x")
file_type_table.insert("", "end", values=("None", 0))  # Initial empty state

root.mainloop()
