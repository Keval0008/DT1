# Step 4: Detailed adjustment type analysis with positive/negative breakdown
print("\n=== STEP 4: DETAILED ADJUSTMENT TYPE BREAKDOWN ===")

# Get overall totals for percentage calculations
total_net_adjustment = df['Adjustment'].sum()
total_positive_adjustment = df[df['Adjustment'] > 0]['Adjustment'].sum()
total_negative_adjustment = df[df['Adjustment'] < 0]['Adjustment'].sum()
total_adjusted_accounts = df[df['Adjustment'] != 0]['GRCA_Account'].nunique()

# Analyze each adjustment type in detail
adj_type_detailed = []

for adj_type in df['Adj Purpose Desc'].unique():
    type_data = df[df['Adj Purpose Desc'] == adj_type]
    
    # Basic metrics - handle None values
    net_adjustment = type_data['Adjustment'].sum() or 0
    positive_data = type_data[type_data['Adjustment'] > 0]
    negative_data = type_data[type_data['Adjustment'] < 0]
    
    positive_adjustment = positive_data['Adjustment'].sum() if not positive_data.empty else 0
    negative_adjustment = negative_data['Adjustment'].sum() if not negative_data.empty else 0
    
    # Account counts
    total_accounts_affected = type_data['GRCA_Account'].nunique()
    positive_accounts = positive_data['GRCA_Account'].nunique() if not positive_data.empty else 0
    negative_accounts = negative_data['GRCA_Account'].nunique() if not negative_data.empty else 0
    
    # Percentages - handle division by zero
    pct_of_net_adj = (net_adjustment / total_net_adjustment * 100) if total_net_adjustment != 0 else 0
    pct_of_total_accounts = (total_accounts_affected / total_adjusted_accounts * 100) if total_adjusted_accounts != 0 else 0
    
    # Impact metrics - handle division by zero
    avg_impact_per_account = net_adjustment / total_accounts_affected if total_accounts_affected > 0 else 0
    original_balance = type_data['FTPBalance'].sum() or 0
    balance_impact_ratio = (net_adjustment / original_balance * 100) if original_balance != 0 else 0
    
    adj_type_detailed.append({
        'Adjustment_Type': adj_type,
        'Net_Adjustment': net_adjustment,
        'Positive_Adjustment': positive_adjustment,
        'Negative_Adjustment': negative_adjustment,
        'Pct_of_Net_Adjustment': pct_of_net_adj,
        'Total_Accounts_Affected': total_accounts_affected,
        'Positive_Accounts': positive_accounts,
        'Negative_Accounts': negative_accounts,
        'Pct_of_Adjusted_Accounts': pct_of_total_accounts,
        'Avg_Impact_Per_Account': avg_impact_per_account,
        'Balance_Impact_Ratio': balance_impact_ratio,
        'Gross_Adjustment_Volume': abs(positive_adjustment) + abs(negative_adjustment)
    })

# Convert to DataFrame
adj_analysis_df = pd.DataFrame(adj_type_detailed)
adj_analysis_df = adj_analysis_df.sort_values('Net_Adjustment', key=abs, ascending=False)

# Display the analysis using your format_currency function
print(f"\n{'Adjustment Type':<25} {'Net Adj':<15} {'+Adj':<15} {'-Adj':<15} {'% of Net':<10} {'Accts(+/-)':<12} {'Avg Impact':<15} {'Impact %':<10}")
print("="*125)

for _, row in adj_analysis_df.iterrows():
    accounts_direction = f"{row['Positive_Accounts']:,}/{row['Negative_Accounts']:,}"
    
    print(f"{row['Adjustment_Type']:<25} "
          f"{format_currency(row['Net_Adjustment']):<15} "
          f"{format_currency(row['Positive_Adjustment']):<15} "
          f"{format_currency(row['Negative_Adjustment']):<15} "
          f"{row['Pct_of_Net_Adjustment']:>8.1f}% "
          f"{accounts_direction:<12} "
          f"{format_currency(row['Avg_Impact_Per_Account']):<15} "
          f"{row['Balance_Impact_Ratio']:>8.1f}%")

# Additional impact metrics
print("\n--- ADDITIONAL IMPACT ANALYSIS ---")

# 1. Direction dominance analysis
print("\n1. ADJUSTMENT DIRECTION DOMINANCE:")
for _, row in adj_analysis_df.iterrows():
    if row['Gross_Adjustment_Volume'] > 0:
        positive_ratio = (row['Positive_Adjustment'] / row['Gross_Adjustment_Volume'] * 100) 
        negative_ratio = (abs(row['Negative_Adjustment']) / row['Gross_Adjustment_Volume'] * 100)
        
        if positive_ratio > 70:
            direction = "STRONGLY POSITIVE"
        elif negative_ratio > 70:
            direction = "STRONGLY NEGATIVE"
        elif abs(positive_ratio - negative_ratio) < 20:
            direction = "BALANCED"
        else:
            direction = "MIXED"
            
        print(f"   {row['Adjustment_Type']:<25}: {direction} (+{positive_ratio:.1f}%/-{negative_ratio:.1f}%)")

# 2. Severity analysis
print("\n2. SEVERITY ANALYSIS (Top 5 by impact per account):")
severity_analysis = adj_analysis_df.nlargest(5, 'Avg_Impact_Per_Account', key=abs)[['Adjustment_Type', 'Avg_Impact_Per_Account', 'Total_Accounts_Affected']]
for _, row in severity_analysis.iterrows():
    impact = row['Avg_Impact_Per_Account']
    if abs(impact) > 10000:
        severity = "VERY HIGH"
    elif abs(impact) > 5000:
        severity = "HIGH"
    elif abs(impact) > 1000:
        severity = "MEDIUM"
    else:
        severity = "LOW"
        
    print(f"   {row['Adjustment_Type']:<25}: {format_currency(impact)} per account ({severity}) - {row['Total_Accounts_Affected']:,} accounts")

# 3. Concentration analysis
print("\n3. CONCENTRATION ANALYSIS:")
top_3_net = adj_analysis_df.nlargest(3, 'Net_Adjustment', key=abs)
total_impact_abs = adj_analysis_df['Net_Adjustment'].abs().sum()

for _, row in top_3_net.iterrows():
    concentration = (abs(row['Net_Adjustment']) / total_impact_abs * 100) if total_impact_abs != 0 else 0
    print(f"   {row['Adjustment_Type']:<25}: {concentration:.1f}% of total absolute impact")

# 4. Account penetration analysis
print("\n4. ACCOUNT PENETRATION ANALYSIS:")
for _, row in adj_analysis_df.head(5).iterrows():
    if row['Total_Accounts_Affected'] > 0:
        positive_penetration = (row['Positive_Accounts'] / row['Total_Accounts_Affected'] * 100)
        negative_penetration = (row['Negative_Accounts'] / row['Total_Accounts_Affected'] * 100)
        print(f"   {row['Adjustment_Type']:<25}: {positive_penetration:.1f}% accounts increased, {negative_penetration:.1f}% accounts decreased")
