def add_detailed_conflict_log_with_psid_name_check(
    df, 
    special_columns, 
    submitted_by_col='Submitted by', 
    submitted_time_col='Submitted time'
):
    """
    Creates detailed conflict log with:
    - Only checks columns containing 'PS ID' or 'Name' for matching
    - Shows all special columns in conflict log with submission info
    - Maintains pipe-separated values for duplicates
    """
    # Get all columns not in special_columns
    group_columns = [col for col in df.columns if col not in special_columns]
    
    # Identify columns to check for matching ('PS ID' or 'Name' in name)
    match_columns = [col for col in special_columns 
                    if ('PS ID' in col) or ('Name' in col)]
    
    # Initialize conflict log column
    df['conflict_log'] = ''
    
    # Group by all non-special columns
    grouped = df.groupby(group_columns, dropna=False)
    
    for name, group in grouped:
        if len(group) > 1:
            conflict_lines = ["Conflict log:"]
            
            # FIRST: Check matching columns ('PS ID' or 'Name')
            matching_conflicts = False
            for col in match_columns:
                unique_values = group[col].dropna().unique()
                if len(unique_values) > 1:
                    matching_conflicts = True
                    value_groups = group.groupby(col)[[submitted_by_col, submitted_time_col]].agg(
                        lambda x: '|'.join(map(str, x.unique()))
                    )
                    for value, (submitters, times) in value_groups.iterrows():
                        conflict_lines.append(
                            f"- MATCHING CONFLICT: {col} has value '{value}' "
                            f"(Submitted by: {submitters}, "
                            f"Submitted time: {times})"
                        )
            
            # THEN: Check all other special columns if matching conflicts exist
            if matching_conflicts:
                other_cols = [col for col in special_columns 
                             if col not in match_columns and
                             col not in [submitted_by_col, submitted_time_col]]
                
                for col in other_cols:
                    unique_values = group[col].dropna().unique()
                    if len(unique_values) > 1:
                        value_groups = group.groupby(col)[[submitted_by_col, submitted_time_col]].agg(
                            lambda x: '|'.join(map(str, x.unique()))
                        )
                        for value, (submitters, times) in value_groups.iterrows():
                            conflict_lines.append(
                                f"- {col} has value '{value}' "
                                f"(Submitted by: {submitters}, "
                                f"Submitted time: {times})"
                            )
            
            # Add submission info summary if no matching conflicts
            if not matching_conflicts:
                submitters = group[submitted_by_col].dropna().unique()
                times = group[submitted_time_col].dropna().unique()
                conflict_lines.append(
                    f"- NOTE: No matching conflicts in PS ID/Name columns "
                    f"(Submitted by: {'|'.join(map(str, submitters))}, "
                    f"Submitted time: {'|'.join(map(str, times))})"
                )
            
            # Join all conflict lines
            df.loc[group.index, 'conflict_log'] = '\n'.join(conflict_lines) if len(conflict_lines) > 1 else ''
    
    return df
