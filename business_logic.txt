import threading
from tkinter import Toplevel, Label, ttk

class ProgressWindow:
    def __init__(self, parent, title="Processing"):
        self.top = Toplevel(parent)
        self.top.title(title)
        self.top.geometry("300x100")
        self.top.resizable(False, False)
        
        self.label = Label(self.top, text="Processing files...")
        self.label.pack(pady=10)
        
        self.progress = ttk.Progressbar(self.top, orient="horizontal", length=250, mode="determinate")
        self.progress.pack(pady=10)
        
        self.top.grab_set()
        
    def update_progress(self, value):
        self.progress['value'] = value
        self.top.update_idletasks()
        
    def close(self):
        self.top.grab_release()
        self.top.destroy()


def save_files():
    if not file_list:
        update_status("Error: No files selected", "red")
        return
    if not folder_path.get():
        update_status("Error: No folder selected", "red")
        return

    # Create progress window
    progress = ProgressWindow(root, "Submitting Files")
    
    # Run processing in a separate thread
    def process_files():
        try:
            timestamp_for_filename = datetime.now().strftime("%d%m%Y_%H%M%S")
            timestamp_for_excel = datetime.now().strftime("%d%m%Y|%H%M%S")
            global user_info_df
            
            validation_errors = []
            total_files = len(file_list)
            
            for i, file in enumerate(file_list, 1):
                progress.update_progress((i/total_files)*100)
                
                df = read_excel_auto(file)
                user_info_df = pd.read_excel(file, sheet_name='L&D', header=1)
                
                # Rest of your processing code remains the same...
                # [Keep all the existing processing code here]
                
            if validation_errors:
                progress.close()
                show_validation_popup(validation_errors, proceed_with_saving, save_for_review)
            else:
                progress.close()
                proceed_with_saving()
                
        except Exception as e:
            progress.close()
            print(e)
            update_status(f"Error: {str(e)}", "red")
            
    # Start the processing thread
    threading.Thread(target=process_files, daemon=True).start()


def process_admin_files():
    global processed_dfs
    if not admin_folder_path.get():
        admin_status_label.config(text="Error: No input folder selected", fg="red")
        return

    # Create progress window
    progress = ProgressWindow(root, "Consolidating Files")
    
    def process_files():
        try:
            xlsx_files = []
            for root, _, files in os.walk(admin_folder_path.get()):
                for file in files:
                    if file.endswith(".xlsx"):
                        xlsx_files.append(os.path.join(root, file))
            
            total_files = len(xlsx_files)
            if total_files == 0:
                progress.close()
                admin_status_label.config(text="Error: No Excel files found", fg="red")
                return
            
            # Rest of your processing code remains the same...
            # [Keep all the existing processing code here]
            
            progress.update_progress(100)
            progress.close()
            admin_status_label.config(text=f"Success: Consolidation saved as {output_file}", fg="green")
            processed_dfs = None
            
        except Exception as e:
            progress.close()
            print(e)
            admin_status_label.config(text=f"Error: {str(e)}", fg="red")
            processed_dfs = None
    
    # Start the processing thread
    threading.Thread(target=process_files, daemon=True).start()
