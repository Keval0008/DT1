sql_lineage_explorer/
├── app.py                  # Main app initialization
├── layout/                 # UI layout components
│   ├── __init__.py
│   ├── upload.py           # File upload components
│   ├── visualization.py    # Graph and table components
│   └── controls.py         # Dropdowns, toggles, etc.
├── callbacks/              # All callback functions
│   ├── __init__.py
│   ├── data_processing.py  # File upload/download
│   ├── lineage.py          # Lineage computation
│   └── dead_ends.py        # Dead-end analysis
├── utils/                  # Helper functions
│   ├── __init__.py
│   ├── parser.py           # SQL parsing
│   └── graph.py            # Graph utilities
└── assets/
    └── styles.css          # Custom styles

--------------------------------------------------------------------------
app.py

from dash import Dash
import dash_bootstrap_components as dbc
from layout import create_layout
from callbacks import register_callbacks

def create_app():
    app = Dash(__name__, 
               external_stylesheets=[dbc.themes.BOOTSTRAP],
               suppress_callback_exceptions=True)
    
    # Set up layout
    app.layout = create_layout()
    
    # Register all callbacks
    register_callbacks(app)
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run_server(debug=True)

--------------------------------------------------------------------------
layout/__init__.py

from dash import html
import dash_bootstrap_components as dbc
from .upload import upload_section
from .controls import control_section
from .visualization import visualization_section

def create_layout():
    return dbc.Container([
        html.H1("SQL Lineage Explorer", className="mb-4"),
        upload_section(),
        control_section(),
        visualization_section(),
    ], fluid=True)

--------------------------------------------------------------------------
layout/upload.py

from dash import dcc, html
import dash_bootstrap_components as dbc

def upload_section():
    return dbc.Card([
        dbc.CardHeader("1. Upload SQL Files or Preprocessed Lineage"),
        dbc.CardBody([
            dcc.Upload(
                id='upload-sql',
                children=dbc.Button("Upload SQL Files", color="primary"),
                multiple=True
            ),
            html.Div(id='upload-status'),
            html.Hr(),
            dcc.Upload(
                id='upload-csv',
                children=dbc.Button("Upload Lineage CSV", color="secondary"),
                multiple=False
            ),
            html.Div(id='csv-status'),
            html.Hr(),
            dbc.Button("Download Lineage CSV", id="download-btn"),
            dcc.Download(id="download-csv"),
        ])
    ], className="mb-4")

--------------------------------------------------------------------------
layout/visualization.py

from dash import html
import dash_bootstrap_components as dbc
import dash_cytoscape as cyto

def visualization_section():
    return dbc.Card([
        dbc.CardHeader("2. Explore Lineage"),
        dbc.CardBody([
            dbc.Tabs([
                dbc.Tab(label="Table-Level Lineage", tab_id="table-level"),
                dbc.Tab(label="Column-Level Lineage", tab_id="column-level"),
            ], id="lineage-tabs", active_tab="table-level"),
            html.Div(id='lineage-content')
        ])
    ], className="mb-4")

--------------------------------------------------------------------------
callbacks/__init__.py

from .data_processing import register_data_callbacks
from .lineage import register_lineage_callbacks
from .dead_ends import register_dead_end_callbacks

def register_callbacks(app):
    register_data_callbacks(app)
    register_lineage_callbacks(app)
    register_dead_end_callbacks(app)

--------------------------------------------------------------------------
callbacks/data_processing.py

from dash import Input, Output, State
import base64
import io
import pandas as pd
from utils.parser import parse_sql_files

def register_data_callbacks(app):
    @app.callback(
        [Output('lineage-store', 'data'),
         Output('upload-status', 'children'),
         Output('table-dropdown', 'options'),
         Output('csv-status', 'children')],
        [Input('upload-sql', 'contents'),
         Input('upload-csv', 'contents')],
        [State('upload-sql', 'filename'),
         State('upload-csv', 'filename')]
    )
    def update_lineage_data(sql_contents, csv_contents, sql_filenames, csv_filename):
        ctx = dash.callback_context.triggered[0]['prop_id']
        
        if 'upload-sql' in ctx and sql_contents:
            # SQL processing logic
            pass
        
        elif 'upload-csv' in ctx and csv_contents:
            # CSV processing logic
            pass
        
        return dash.no_update, dash.no_update, dash.no_update, dash.no_update

    @app.callback(
        Output("download-csv", "data"),
        [Input("download-btn", "n_clicks")],
        [State('lineage-store', 'data')],
        prevent_initial_call=True
    )
    def download_csv(n_clicks, lineage_data):
        df = pd.DataFrame(lineage_data)
        return dcc.send_data_frame(df.to_csv, "lineage_data.csv", index=False)

--------------------------------------------------------------------------
callbacks/lineage.py

from dash import Input, Output
import pandas as pd
from utils.graph import create_lineage_graph, graph_to_cytoscape

def register_lineage_callbacks(app):
    @app.callback(
        Output('column-dropdown', 'options'),
        [Input('table-dropdown', 'value')],
        [State('lineage-store', 'data')]
    )
    def update_column_dropdown(selected_table, lineage_data):
        # Column dropdown logic
        pass

    @app.callback(
        Output('lineage-content', 'children'),
        [Input('lineage-tabs', 'active_tab'),
         Input('table-dropdown', 'value'),
         Input('column-dropdown', 'value'),
         Input('direction-toggle', 'value')],
        [State('lineage-store', 'data')]
    )
    def update_lineage_visualization(tab, table, column, direction, lineage_data):
        # Visualization logic
        pass

--------------------------------------------------------------------------
utils/graph.py

import networkx as nx
from typing import List, Dict, Optional

def create_lineage_graph(df: pd.DataFrame, level: str = 'column') -> nx.DiGraph:
    """Create a NetworkX graph from lineage data"""
    G = nx.DiGraph()
    
    if level == 'column':
        for _, row in df.iterrows():
            source = f"{row['source_table']}.{row['source_column']}"
            target = f"{row['derived_table']}.{row['derived_column']}"
            G.add_node(source, label=source, type='column')
            G.add_node(target, label=target, type='column')
            G.add_edge(source, target)
    else:  # table-level
        for _, row in df.iterrows():
            source = row['source_table']
            target = row['derived_table']
            G.add_node(source, label=source, type='table')
            G.add_node(target, label=target, type='table')
            if not G.has_edge(source, target):
                G.add_edge(source, target)
    
    return G

def graph_to_cytoscape(G: nx.DiGraph, selected: Optional[str] = None) -> List[Dict]:
    """Convert NetworkX graph to Cytoscape elements"""
    elements = []
    
    for node in G.nodes:
        node_data = {
            'data': {
                'id': node,
                'label': G.nodes[node]['label']
            },
            'classes': 'selected' if node == selected else 'unselected'
        }
        elements.append(node_data)
    
    for edge in G.edges:
        edge_data = {
            'data': {
                'source': edge[0],
                'target': edge[1]
            },
            'classes': 'highlight' if (edge[0] == selected or edge[1] == selected) else 'unselected'
        }
        elements.append(edge_data)
    
    return elements

--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------

