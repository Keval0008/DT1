from sqlglot import parse
from sqlglot.expressions import Table, Create
from typing import List, Tuple

def extract_table_lineage(sql_code: str, dialect: str = "bigquery") -> List[Tuple[str, str]]:
    """
    Extracts table-level lineage (source → target) from SQL code using sqlglot.

    Parameters:
        sql_code (str): SQL code with one or more statements.
        dialect (str): SQL dialect, default is "bigquery".

    Returns:
        List[Tuple[str, str]]: List of (source_table, target_table) lineage edges.
    """
    lineage = []
    statements = parse(sql_code, read=dialect)

    for statement in statements:
        target_table = None
        source_tables = set()

        # Identify the target table for CREATE TABLE AS SELECT or INSERT INTO
        if isinstance(statement, Create) and statement.this:
            target_table = statement.this.sql(dialect=dialect)

        # Collect all source tables from the statement
        for table_node in statement.find_all(Table):
            table_name = table_node.sql(dialect=dialect)
            source_tables.add(table_name)

        # Add lineage edges (source → target)
        if target_table:
            for source in source_tables:
                if source != target_table:
                    lineage.append((source, target_table))

    return lineage

