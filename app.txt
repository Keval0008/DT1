import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import os
import pandas as pd
import numpy as np
import getpass
from datetime import datetime
from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
from openpyxl.comments import Comment
import copy
import warnings

# Suppress warnings
warnings.filterwarnings('ignore')

# Get current user ID
keyword = getpass.getuser()  

# Admin users
admin_users = ["admin1", "admin2", "superuser"]

# Global variables
processed_dfs = None
USER_INFO_FILE = "user_info.xlsx"

# Column structure helpers
def get_role_columns(role_num):
    """Returns all column prefixes for a given role number"""
    role_names = {
        1: "Role Holder1 Preparer",
        2: "Role Holder2 Reviewer", 
        3: "Role Holder3 Account Owner"
    }
    prefix = role_names[role_num]
    
    return {
        'ps_id': f"{prefix}|PS ID",
        'name': f"{prefix}|Name",
        'grade': f"{prefix}|Group Grade",
        'manual': f"{prefix}|Manually Added",
        'email': f"{prefix}|Contact Email",
        'bf1': f"{prefix}|BF Level 1",
        'bf2': f"{prefix}|BF Level 2",
        'bf3': f"{prefix}|BF Level 3",
        'bf4': f"{prefix}|BF Level 4",
        'bf5': f"{prefix}|BF Level 5"
    }

def load_user_info():
    """Load the user information file"""
    try:
        user_info_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), USER_INFO_FILE)
        if not os.path.exists(user_info_path):
            messagebox.showerror("Error", f"User info file not found at: {user_info_path}")
            return None
        
        user_info = pd.read_excel(user_info_path)
        required_columns = ['User ID', 'PERSON_ID_EXTERNAL', 'Group Grade', 'Manually added column', 
                          'Contact Email Address', 'BF Level 1', 'BF Level 2', 'BF Level 3', 
                          'BF Level 4', 'BF Level 5']
        
        missing_cols = [col for col in required_columns if col not in user_info.columns]
        if missing_cols:
            messagebox.showerror("Error", f"User info file missing columns: {', '.join(missing_cols)}")
            return None
            
        return user_info
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load user info: {str(e)}")
        return None

def validate_group_grade(role_num, group_grade):
    """Validate group grade for role"""
    if pd.isna(group_grade) or group_grade in ["", None]:
        return False
        
    group_grade = str(group_grade).strip()
    
    valid_grades = {
        1: ["06", "05", "04", "03", "02", "01", "MD"],
        2: ["05", "04", "03", "02", "01", "MD"],
        3: ["04", "03", "02", "01", "MD"]
    }
    return group_grade in valid_grades[role_num]

def get_user_details(user_info_df, user_id):
    """Get user details from ID"""
    if user_info_df is None or user_id in [None, ""]:
        return None
        
    user_id_str = str(user_id).strip()
    
    # Try User ID
    mask = user_info_df['User ID'].astype(str).str.strip() == user_id_str
    if mask.any():
        return user_info_df[mask].iloc[0]
    
    # Try PERSON_ID_EXTERNAL
    mask = user_info_df['PERSON_ID_EXTERNAL'].astype(str).str.strip() == user_id_str
    if mask.any():
        return user_info_df[mask].iloc[0]
    
    return None

def validate_role_holders(df, user_info_df):
    """Validate all role holders"""
    validation_errors = []
    
    for role_num in [1, 2, 3]:
        cols = get_role_columns(role_num)
        ps_id_col = cols['ps_id']
        
        # Check if column exists
        if not any(ps_id_col in '|'.join(map(str, col)) for col in df.columns):
            continue
            
        for idx, row in df.iterrows():
            ps_id = row[ps_id_col]
            if pd.isna(ps_id) or str(ps_id).strip() in ["", "None"]:
                continue
                
            user_details = get_user_details(user_info_df, ps_id)
            if user_details is None:
                validation_errors.append(
                    f"Row {idx+1}: {cols['ps_id']} - User {ps_id} not found"
                )
                continue
                
            group_grade = user_details['Group Grade']
            if not validate_group_grade(role_num, group_grade):
                validation_errors.append(
                    f"Row {idx+1}: {cols['ps_id']} - Invalid grade '{group_grade}' for {ps_id}"
                )
    
    return validation_errors

def add_missing_columns(df):
    """Add missing role holder columns"""
    for role_num in [1, 2, 3]:
        cols = get_role_columns(role_num)
        if not any(cols['ps_id'] in '|'.join(map(str, col)) for col in df.columns):
            for col_name in cols.values():
                df[col_name] = ""
    return df

def highlight_invalid_cells(worksheet, validation_errors):
    """Highlight cells with validation issues"""
    yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
    
    for error in validation_errors:
        parts = error.split(":")
        if len(parts) < 2:
            continue
            
        row_part = parts[0].replace("Row", "").strip()
        try:
            row_num = int(row_part) + 3  # Account for headers
        except ValueError:
            continue
            
        col_part = parts[1].split("-")[0].strip()
        for col_num in range(1, worksheet.max_column + 1):
            cell = worksheet.cell(row=1, column=col_num)
            if cell.value and col_part in str(cell.value):
                target_cell = worksheet.cell(row=row_num, column=col_num)
                target_cell.fill = yellow_fill
                if not target_cell.comment:
                    target_cell.comment = Comment(error, "Validation Error")
                break

# [Rest of your original functions (select_files, select_folder, merge_and_format_rows, 
# save_files, update_stats, update_status, select_admin_folder, select_admin_output_folder, 
# process_admin_files) remain the same, but use the updated helper functions above]

# Tkinter UI Setup (same as your original code)
root = tk.Tk()
root.title("File Rename & Save")
root.geometry("500x395")
root.configure(bg="#f5f5f5")
root.resizable(False, False)

# Variables
file_list = []
folder_path = tk.StringVar()
admin_folder_path = tk.StringVar()
admin_output_folder_path = tk.StringVar()

# Fonts and Styles
label_font = ("Helvetica", 10)
button_font = ("Helvetica", 10, "bold")
stats_font = ("Helvetica", 10, "bold")

# ttk Style
style = ttk.Style()
style.theme_use("clam")
style.configure("TButton",
               padding=6,
               relief="raised",
               background="#4a90e2",
               foreground="white",
               borderwidth=2,
               borderradius=10)
style.map("TButton",
          background=[("active", "#357ABD")])

# Notebook for tabs
notebook = ttk.Notebook(root)
notebook.pack(padx=20, pady=20, fill="both", expand=True)

# User Tab
user_frame = tk.Frame(notebook, bg="#f5f5f5")
notebook.add(user_frame, text="User Panel")

# Admin Tab (only for admin users)
if getpass.getuser() in admin_users:
    admin_frame = tk.Frame(notebook, bg="#f5f5f5")
    notebook.add(admin_frame, text="Admin")

# User Tab Content
tk.Label(user_frame, text="BSRS Data Collection Tool", font=("Helvetica", 14, "bold"), bg="#f5f5f5").pack(pady=10)
ttk.Button(user_frame, text="Select BSRS Template", command=select_files, style="TButton").pack(pady=5)
ttk.Button(user_frame, text="Select Destination Folder", command=select_folder, style="TButton").pack(pady=5)
ttk.Button(user_frame, text="Submit", command=save_files, style="TButton").pack(pady=15)
status_label = tk.Label(user_frame, text="Ready", font=label_font, bg="#f5f5f5", fg="#333333")
status_label.pack(pady=5)
stats_label = tk.Label(user_frame, 
                      text="Template Selected: 0\nDestination Folder: Not Selected",
                      font=stats_font, 
                      bg="#f5f5f5", 
                      fg="#333333", 
                      justify="left", 
                      anchor="nw",
                      wraplength=450)
stats_label.pack(pady=10, fill="x")

# Admin Tab Content
if getpass.getuser() in admin_users:
    tk.Label(admin_frame, text="BSRS Data Collection Tool", font=("Helvetica", 14, "bold"), bg="#f5f5f5").pack(pady=10)
    
    folder_button_frame = tk.Frame(admin_frame, bg="#f5f5f5")
    folder_button_frame.pack(pady=5, fill="x")
    
    ttk.Button(folder_button_frame, text="Select Input Folder", command=select_admin_folder, style="TButton").pack(pady=5)
    ttk.Button(folder_button_frame, text="Select Output Folder", command=select_admin_output_folder, style="TButton").pack(pady=5)
    ttk.Button(admin_frame, text="Consolidate", command=process_admin_files, style="TButton").pack(pady=5)
    admin_status_label = tk.Label(admin_frame, text="Ready", font=label_font, bg="#f5f5f5", fg="#333333")
    admin_status_label.pack(pady=10)

root.mainloop()
