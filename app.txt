def create_data_table(
    dataframe,
    table_id=None,
    highlight_df=None,
    highlight_color='lightyellow',
    precision=2,
    enable_download=False,
    table_type=None
):
    """
    Creates a Dash DataTable with proper highlighting that works across pagination.
    Uses filter queries to match against highlight rules.
    """
    if dataframe.empty:
        return html.Div("No data available", style={'color': 'gray'})
    
    df = dataframe.copy()
    
    # Apply precision to numeric columns
    float_cols = df.select_dtypes(include=['float64']).columns
    for col in float_cols:
        df[col] = df[col].round(precision)
    
    style_data_conditional = []
    
    if highlight_df is not None and not highlight_df.empty:
        # Create filter conditions for each table type
        if table_type == 'main':
            # Create combined filter for main columns
            main_filters = []
            derived_filters = []
            
            for _, row in highlight_df.iterrows():
                table = str(row['Table Name'])
                column = str(row['Variable Name'])
                
                # For main columns
                main_filters.append(
                    f"{{main_table_name}} = '{table}' && {{main_column_name}} = '{column}'"
                )
                # For derived columns
                derived_filters.append(
                    f"{{derived_table_name}} = '{table}' && {{derived_column_name}} = '{column}'"
                )
            
            # Add main column highlighting
            if main_filters:
                style_data_conditional.append({
                    'if': {
                        'filter_query': ' || '.join(main_filters),
                        'column_id': ['main_table_name', 'main_column_name']
                    },
                    'backgroundColor': highlight_color
                })
            
            # Add derived column highlighting
            if derived_filters:
                style_data_conditional.append({
                    'if': {
                        'filter_query': ' || '.join(derived_filters),
                        'column_id': ['derived_table_name', 'derived_column_name']
                    },
                    'backgroundColor': highlight_color
                })
        
        elif table_type == 'secondary':
            filters = [
                f"{{Table Name}} = '{str(row['Table Name'])}' && {{Column Name}} = '{str(row['Variable Name'])}'"
                for _, row in highlight_df.iterrows()
            ]
            
            if filters:
                style_data_conditional.append({
                    'if': {
                        'filter_query': ' || '.join(filters),
                        'column_id': ['Table Name', 'Column Name']
                    },
                    'backgroundColor': highlight_color
                })
        
        elif table_type == 'source':
            filters = [
                f"{{Source Table}} = '{str(row['Table Name'])}' && {{Source Column}} = '{str(row['Variable Name'])}'"
                for _, row in highlight_df.iterrows()
            ]
            
            if filters:
                style_data_conditional.append({
                    'if': {
                        'filter_query': ' || '.join(filters),
                        'column_id': ['Source Table', 'Source Column']
                    },
                    'backgroundColor': highlight_color
                })
    
    # Create the table
    table = dash_table.DataTable(
        id=table_id or f"table-{pd.Timestamp.now().value}",
        data=df.to_dict('records'),
        columns=[{
            'name': col.replace('_', ' ').title(),
            'id': col,
            'type': 'numeric' if col in float_cols else 'text',
            'format': {'specifier': f'.{precision}f'} if col in float_cols else None
        } for col in df.columns],
        style_table={'overflowX': 'auto', 'width': '100%'},
        style_cell={
            'textAlign': 'left',
            'minWidth': '100px',
            'padding': '5px',
            'whiteSpace': 'normal'
        },
        style_header={
            'backgroundColor': 'lightgrey',
            'fontWeight': 'bold'
        },
        style_data_conditional=style_data_conditional,
        page_size=10,  # Your preferred page size
        filter_action='native',
        sort_action='native',
    )
    
    if enable_download:
        return html.Div([
            table,
            html.Button(
                "Download CSV",
                id={"type": "download-button", "index": table_id},
                style={"marginTop": "10px"}
            ),
            dcc.Download(id={"type": "download", "index": table_id})
        ])
    return table
