def create_data_table(
    dataframe,
    table_id=None,
    highlight_df=None,
    highlight_color='lightyellow',
    precision=2,
    enable_download=False,
    table_type=None
):
    # ... (previous code remains the same until conditional styling) ...
    
    style_data_conditional = []
    
    if highlight_df is not None and not highlight_df.empty:
        # Convert highlight_df to a set of (table, column) pairs
        highlight_pairs = set(zip(
            highlight_df['Table Name'].astype(str), 
            highlight_df['Variable Name'].astype(str)
        ))
        
        # Find exact row indices that need highlighting
        for idx, row in dataframe.iterrows():
            if table_type == 'main':
                # Check both main and derived columns
                if (str(row['main_table_name']), str(row['main_column_name'])) in highlight_pairs:
                    style_data_conditional.append({
                        'if': {
                            'row_index': idx,
                            'column_id': 'main_table_name'
                        },
                        'backgroundColor': highlight_color
                    })
                    style_data_conditional.append({
                        'if': {
                            'row_index': idx,
                            'column_id': 'main_column_name'
                        },
                        'backgroundColor': highlight_color
                    })
                
                if (str(row['derived_table_name']), str(row['derived_column_name'])) in highlight_pairs:
                    style_data_conditional.append({
                        'if': {
                            'row_index': idx,
                            'column_id': 'derived_table_name'
                        },
                        'backgroundColor': highlight_color
                    })
                    style_data_conditional.append({
                        'if': {
                            'row_index': idx,
                            'column_id': 'derived_column_name'
                        },
                        'backgroundColor': highlight_color
                    })
            
            elif table_type == 'secondary':
                # Similar logic for other table types
                pass
            
            elif table_type == 'source':
                # Similar logic for source table
                pass
    
    # Create the table with page_size
    table = dash_table.DataTable(
        id=table_id,
        data=dataframe.to_dict('records'),
        columns=[...],  # Your column definitions
        style_data_conditional=style_data_conditional,
        page_size=10,  # Or whatever your page size is
        # ... other parameters ...
    )
    
    return table
