import dash_table
from dash import html
import pandas as pd
import dash_core_components as dcc

def create_data_table(
    dataframe,
    table_id=None,
    highlight_vars=None,
    highlight_color='lightyellow',
    precision=2,
    enable_download=False
):
    """
    Creates a Dash DataTable with cell highlighting for specified values.
    
    Args:
        dataframe: Input DataFrame
        table_id: Unique ID for the table
        highlight_vars: List of values to highlight anywhere in the table
        highlight_color: Background color for highlighted cells
        precision: Rounding for numeric columns
        enable_download: Show download button
        
    Returns:
        Dash DataTable component with optional download button
    """
    if dataframe.empty:
        return html.Div("No data available", style={'color': 'gray'})
    
    df = dataframe.copy()
    
    # Apply precision to numeric columns
    float_cols = df.select_dtypes(include=['float64']).columns
    for col in float_cols:
        df[col] = df[col].round(precision)
    
    # Convert highlight_vars to strings and ensure it's a list
    if highlight_vars is not None:
        highlight_vars = [str(var) for var in highlight_vars] if not isinstance(highlight_vars, str) else [str(highlight_vars)]
    else:
        highlight_vars = []
    
    # Generate conditional styling for highlighted cells
    style_data_conditional = []
    if highlight_vars:
        # Create one condition per highlight value that checks all columns
        for val in highlight_vars:
            style_data_conditional.append({
                'if': {
                    'filter_query': ' || '.join([f'{{{col}}} = "{val}"' for col in df.columns]),
                },
                'backgroundColor': highlight_color,
                'color': 'black'
            })
    
    # Create the DataTable
    table = dash_table.DataTable(
        id=table_id or f"table-{pd.Timestamp.now().value}",
        data=df.to_dict('records'),
        columns=[{
            'name': col.replace('_', ' ').title(),
            'id': col,
            'type': 'numeric' if col in float_cols else 'text',
            'format': {'specifier': f'.{precision}f'} if col in float_cols else None
        } for col in df.columns],
        style_table={
            'overflowX': 'auto',
            'width': '100%',
            'maxHeight': '500px'
        },
        style_cell={
            'textAlign': 'left',
            'minWidth': '100px',
            'padding': '5px',
            'whiteSpace': 'normal',
            'height': 'auto'
        },
        style_header={
            'backgroundColor': 'lightgrey',
            'fontWeight': 'bold'
        },
        style_data_conditional=style_data_conditional,
        page_size=10,
        filter_action='native',
        sort_action='native',
        sort_mode='multi',
        page_action='native',
    )
    
    # Add download button if enabled
    if enable_download:
        return html.Div([
            table,
            html.Button(
                "Download CSV",
                id={"type": "download-button", "index": table_id},
                style={"marginTop": "10px"}
            ),
            dcc.Download(id={"type": "download", "index": table_id})
        ])
    
    return table
