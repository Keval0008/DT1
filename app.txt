from sqlglot import parse_one, transpile
from sqlglot.expressions import Table, Subquery, Create
from typing import List, Tuple

def extract_table_lineage(sql_code: str, dialect: str = "bigquery") -> List[Tuple[str, str]]:
    """
    Extracts table-level lineage (source â†’ target) from SQL code using sqlglot for BigQuery.

    Parameters:
        sql_code (str): The SQL code containing one or more CREATE/INSERT statements.
        dialect (str): SQL dialect, default is "bigquery".

    Returns:
        List of tuples representing (source_table, target_table).
    """
    lineage = []

    # Parse the SQL string into individual statements
    parsed_statements = sqlglot.parse(sql_code, read=dialect)

    for statement in parsed_statements:
        target_table = None
        source_tables = set()

        # Identify the target table (CREATE TABLE or INSERT INTO)
        if isinstance(statement, Create) and statement.this:
            target_table = statement.this.name
        elif statement.args.get("expression") and isinstance(statement.args["expression"], Table):
            target_table = statement.args["expression"].name

        # Collect all source tables used in the statement
        for node in statement.find_all(Table):
            if not node.is_temp:
                source_tables.add(node.name)

        # Generate lineage tuples
        if target_table:
            for source in source_tables:
                if source != target_table:  # Avoid self-dependency
                    lineage.append((source, target_table))

    return lineage
