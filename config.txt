# pip install msoffcrypto-tool pandas openpyxl xlrd
import io
import msoffcrypto
import pandas as pd
from pathlib import Path

def read_encrypted_excel(path_or_bytes, read_password, sheet_name=0, **read_excel_kwargs):
    """
    Decrypt a password-protected Excel file (with OPEN/READ password) and return a pandas DataFrame
    or a dict of DataFrames (if sheet_name=None or 'all').

    Parameters
    ----------
    path_or_bytes : str | Path | bytes | file-like
        Path to the file or file-like/bytes of the encrypted workbook.
    read_password : str
        The OPEN/READ password used to unlock the file. (You don't need the write/modify password.)
    sheet_name : int | str | list | None | 'all'
        Same as pandas.read_excel. Use None or 'all' to load all sheets.
    **read_excel_kwargs :
        Any extra kwargs to pass to pandas.read_excel (e.g., header=0, dtype=..., engine=...)

    Returns
    -------
    DataFrame or dict[str, DataFrame]
    """
    # Accept bytes/streams/paths
    if isinstance(path_or_bytes, (str, Path)):
        fin = open(path_or_bytes, "rb")
        close_fin = True
    elif isinstance(path_or_bytes, (bytes, bytearray)):
        fin = io.BytesIO(path_or_bytes)
        close_fin = False
    else:
        fin = path_or_bytes  # assume file-like
        close_fin = False

    try:
        # Load and decrypt with msoffcrypto
        office_file = msoffcrypto.OfficeFile(fin)
        office_file.load_key(password=read_password)  # OPEN/READ password goes here
        decrypted = io.BytesIO()
        office_file.decrypt(decrypted)

        # Rewind the buffer so pandas can read it
        decrypted.seek(0)

        # If user asked for all sheets with 'all', normalize to None (pandas convention)
        sn = None if sheet_name == "all" else sheet_name

        # Let pandas pick the right engine:
        # - .xlsx/.xlsm -> openpyxl
        # - .xls -> xlrd (install xlrd)
        # - .xlsb -> use engine="pyxlsb" (pip install pyxlsb) and pass engine explicitly
        df = pd.read_excel(decrypted, sheet_name=sn, **read_excel_kwargs)
        return df
    finally:
        if close_fin:
            fin.close()

# ------------------ Usage examples ------------------

# 1) Single sheet (first sheet)
# df = read_encrypted_excel("protected.xlsx", read_password="your_read_password")

# 2) Specific sheet by name
# df = read_encrypted_excel("protected.xlsx", read_password="your_read_password", sheet_name="Data")

# 3) All sheets as a dict of DataFrames
# dfs = read_encrypted_excel("protected.xlsx", read_password="your_read_password", sheet_name="all")

# 4) If the file is .xlsb, pass engine="pyxlsb"
# df = read_encrypted_excel("protected.xlsb", read_password="your_read_password", engine="pyxlsb")
