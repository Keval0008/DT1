from dash import Dash, html, Input, Output, State, callback_context, no_update
from dash.exceptions import PreventUpdate
from lineage_chart import LineageChart  # Import our new class

# Initialize the chart component
lineage_chart = LineageChart()

app = Dash(__name__)

app.layout = html.Div([
    # Your existing components
    html.Div(id="lineage-result"),
    # ... other components ...
    
    # Add a container for the chart
    html.Div(id="lineage-chart-container")
])

# Register the chart callbacks
lineage_chart.register_callbacks(app)

@app.callback(
    Output("lineage-result", "children"),
    Output("trace-button", "n_clicks"),
    Output("lineage-chart-container", "children"),  # New output for chart
    Input("trace-button", "n_clicks"),
    State("table-dropdown", "value"),
    State('variable-dropdown', 'value'),
    State("trace-direction", "value"),
)
def update_lineage(n_clicks, table, variable, direction):
    global lineage_master_df
    if n_clicks is None:
        raise PreventUpdate

    if table is None or variable is None:
        raise PreventUpdate

    # Get the lineage data
    direction = (direction == "source_to_target")
    tracer = LineageTracer(lineage_master_df)
    filtered_df, deadends_df, source_df = tracer.get_lineage([table], [variable], direction)
    
    # Create tables with download capability
    lineage_table = create_ag_grid_table(filtered_df, table_id="lineage-grid")
    deadends_table = create_ag_grid_table(deadends_df, table_id="deadends-grid")
    source_table = create_ag_grid_table(source_df, table_id="source-grid")
    
    # Create the lineage chart if we have data
    chart_layout = None
    if not filtered_df.empty:
        lineage_chart.create_from_dataframe(filtered_df)
        chart_layout = lineage_chart.get_chart_layout()
    
    return html.Div([
            html.H4("Lineage Data"),
            lineage_table,
            html.H4("Deadends Data"),
            deadends_table,
            html.H4("Source Data"),
            source_table,
        ]), 0, chart_layout  # Return chart as third output
