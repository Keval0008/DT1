from typing import Iterable, Optional
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.styles import Font, Alignment, Border, Side

def format_multiindex_header(
    ws: Worksheet,
    header_rows: Iterable[int] = (1, 2, 3),
    start_col: int = 1,
    end_col: Optional[int] = None,
) -> Worksheet:
    """
    Format a 3-level (or any N-level) MultiIndex header in an openpyxl worksheet.

    - Bolds all header cells
    - Centers text (horizontal & vertical)
    - Applies thin border around each header cell
    - For each header row, merges horizontally adjacent cells with identical values

    Parameters
    ----------
    ws : Worksheet
        Target worksheet.
    header_rows : Iterable[int], default (1, 2, 3)
        1-based row numbers that contain the MultiIndex column headers (top -> bottom).
        Adjust if you wrote the DataFrame starting lower in the sheet.
    start_col : int, default 1
        First column index of the header block (1-based).
    end_col : int | None, default None
        Last column index of the header block (1-based). If None, uses ws.max_column.

    Returns
    -------
    Worksheet
        The same worksheet, mutated in place, returned for convenience.
    """
    if end_col is None:
        end_col = ws.max_column

    # Styles
    thin = Side(border_style="thin", color="000000")
    border = Border(left=thin, right=thin, top=thin, bottom=thin)
    font_bold = Font(bold=True)
    align_center = Alignment(horizontal="center", vertical="center", wrap_text=True)

    # 1) Apply font/alignment/border to each header cell
    for r in header_rows:
        for c in range(start_col, end_col + 1):
            cell = ws.cell(row=r, column=c)
            cell.font = font_bold
            cell.alignment = align_center
            cell.border = border

    # 2) Merge horizontally where adjacent header labels are identical (per header row)
    merged_ranges = []
    for r in header_rows:
        c = start_col
        while c <= end_col:
            start_c = c
            start_val = ws.cell(row=r, column=c).value

            # Skip blanks (don't merge empty runs)
            if start_val is None or str(start_val).strip() == "":
                c += 1
                continue

            # Extend run while value stays identical
            c += 1
            while c <= end_col and ws.cell(row=r, column=c).value == start_val:
                c += 1

            # If run length >= 2, merge [start_c .. c-1]
            end_run = c - 1
            if end_run > start_c:
                ws.merge_cells(start_row=r, start_column=start_c, end_row=r, end_column=end_run)
                merged_ranges.append((r, start_c, r, end_run))

    # 3) Re-apply styles to the top-left cells of merged regions (Excel uses top-left style)
    for (r1, c1, r2, c2) in merged_ranges:
        top_left = ws.cell(row=r1, column=c1)
        top_left.font = font_bold
        top_left.alignment = align_center
        top_left.border = border

    return ws
