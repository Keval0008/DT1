from collections import defaultdict

def analyze_table_lineage(lineage_data: dict) -> dict:
    """
    Analyze table lineage to identify:
    - Input tables (sources with no dependencies)
    - Output tables (final targets)
    - Intermediate tables (both sources and targets)
    
    Args:
        lineage_data: Output from extract_table_lineage function
        
    Returns:
        Dictionary with:
        {
            'input_tables': [],
            'output_tables': [],
            'intermediate_tables': []
        }
    """
    # Build dependency graph
    graph = defaultdict(set)
    all_tables = set()
    
    # Process CTEs
    for cte, sources in lineage_data.get('ctes', {}).items():
        all_tables.add(cte)
        for source in sources:
            graph[source].add(cte)
            all_tables.add(source)
    
    # Process target tables
    for target, sources in lineage_data.get('target_tables', {}).items():
        all_tables.add(target)
        for source in sources:
            # If source is a CTE, we already have its dependencies
            if source in lineage_data.get('ctes', {}):
                for cte_source in lineage_data['ctes'][source]:
                    graph[cte_source].add(target)
            else:
                graph[source].add(target)
    
    # Identify table types
    input_tables = set()
    output_tables = set()
    
    # Tables that appear as sources but never as targets
    input_tables = {table for table in all_tables 
                   if table not in [target for targets in graph.values() for target in targets]}
    
    # Tables that appear as targets but not as sources
    output_tables = {table for table in all_tables 
                    if table not in graph or not graph[table]}
    
    # Intermediate tables are all others
    intermediate_tables = all_tables - input_tables - output_tables
    
    return {
        'input_tables': sorted(input_tables),
        'output_tables': sorted(output_tables),
        'intermediate_tables': sorted(intermediate_tables)
    }

# Example usage:
if __name__ == "__main__":
    # Your SQL code
    sql_code = """
    WITH user_data AS (
        SELECT * FROM project1.dataset1.users
        WHERE active = TRUE
    ),
    
    order_summary AS (
        SELECT 
            u.user_id,
            COUNT(o.order_id) as order_count
        FROM user_data u
        JOIN project1.dataset2.orders o ON u.user_id = o.user_id
        GROUP BY 1
    )
    
    INSERT INTO project2.analytics.user_metrics
    SELECT 
        user_id,
        order_count,
        CURRENT_DATE() as snapshot_date
    FROM order_summary;
    """
    
    # Step 1: Extract lineage
    lineage_data = extract_table_lineage(sql_code)
    
    # Step 2: Analyze lineage
    analysis = analyze_table_lineage(lineage_data)
    
    print("Input Tables (Sources):", analysis['input_tables'])
    print("Output Tables (Targets):", analysis['output_tables'])
    print("Intermediate Tables:", analysis['intermediate_tables'])
