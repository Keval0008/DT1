@app.callback(
    Output("current-view-table", "children"),
    Input("lineage-chart", "elements"),  # Triggers when graph updates
    State("graph-store", "data"),        # Contains original full data
    State("lineage-master-df", "data")  # Your original DataFrame
)
def update_current_view_table(current_elements, graph_data, master_df):
    if not current_elements or not graph_data or not master_df:
        return "No data to display"
    
    # Get visible node IDs from current elements
    visible_nodes = set()
    for element in current_elements:
        if "source" not in element["data"]:  # It's a node
            visible_nodes.add(element["data"]["id"])
    
    # Convert node IDs back to table.variable format
    visible_items = []
    for node_id in visible_nodes:
        table, variable = node_id.split(".", 1)
        visible_items.append({"table": table, "variable": variable})
    
    # Filter the original DataFrame
    visible_df = pd.DataFrame(visible_items)
    merged_df = pd.merge(visible_df, master_df, 
                        on=["table", "variable"], 
                        how="left")
    
    # Return a Dash DataTable
    return dash_table.DataTable(
        columns=[{"name": col, "id": col} for col in merged_df.columns],
        data=merged_df.to_dict("records"),
        style_table={"overflowX": "auto"},
        page_size=10,
        filter_action="native",
        sort_action="native"
    )
